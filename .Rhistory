tbl <- read.csv("C:\\Users\\Chris\\Google Drive\\SML\\Data\\First Lead Dump\\report1.csv", as.is=TRUE)
savehistory("C:/Users/Chris/Google Drive/SML/R Code/Initial Data Load.Rhistory")
library(swirl)
swirl()
install_course_zip("C:/Users/Chris/Downloads/swirl_courses-master.zip", multi=TRUE, which_course="R Programming")
swirl()
getwd
getwd()
x <- data.frame(foo = 1:4, bar = c(T,T,F,F))
x
nrow(x)
ncol(x)
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z <- c(1.1,9,3.14)
?c
z
c(z, 555)
z , 555
c(z,555,z)
z * 2 + 100
sqr(z - 1)
my_sqrt <- sqrt(z -1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
getwd()
ls(0)
ls
ls ()
x <- 9
ls()
list.files()
dir
dir()
?list.files
args(list.files())
args(list.files)
old.dir <- dir()
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.r")
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2","testdir3"), recursive = TRUE)
dir()
unlink("testdir2/", recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd("old.dir")
dir
dir
dir()
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
?str
str(x)
x
y
u
mydir
my_div
str(mydiv)
str("mydiv")
library(swirl)
swirl()
x
x[1:10]
x[is.na(x)]
is.na(na)
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
is.na(x)
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo =11,bar=2,norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
vect2
names (vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
seq_along(vect)
for (i in vect) print(i)
z <- 5
While (x>3 & z <10)
{
print(z)
coin <- rbinom(1,1,0.5)
if (coin == 1)
{
z <- z + 1
}
else
{
z <- z - 1
}
}
?while
?while
?is.na
?while
?'while'
x <- 0
while (x < 3) x <- x + 1
z <- 5
while (x>3 & z <10)
{
print(z)
coin <- rbinom(1,1,0.5)
if (coin == 1)
{
z <- z + 1
}
else
{
z <- z - 1
}
}
{
source('~/.active-rstudio-document', echo=TRUE)
debugSource('C:/Users/Chris/SkyDrive/Documents/while test.R', echo=TRUE)
add2 function(x,y) {
x + y
}
add2 <- function(x,y) {
x + y
}
add2(3,5)
use <- x > 10
above <- (x, n){
use <- x > n
x[use]
}
above <- function (x, n){
use <- x > n
x[use]
}
y <- c[5:15]
y <- c(5:15)
y
above (y,8)
above <- function (x, n = 10){
use <- x > n
x[use]
}
above (y)
x <- matrix(rnorm(200),20,10)
x
apply (x, 1, quantile, probs = c(.25,.75))
apply (x, 2, quantile, probs = c(.25,.75))
apply (x, 3, quantile, probs = c(.25,.75))
a <- array(rnorm(2 * 2 * 10), c(2,2,10))
apply (a, c(1,2), mean)
rowMeans(a, dim = 3)
rowMeans(a, dim = 1)
rowMeans(a, dim = 2)
mapply (rep, 1:4, 4:1)
list(rep(1,4), rep (2,3), rep(3,2), rep(4,1))
?gl
?mean
?[]
?vector
?'$'
?mean
source("cachematrix.R")
source(cachematrix.R)
source('cachematrix.R')
setwd("C:/Users/Chris/git/ProgrammingAssignment2")
source('cachematrix.R')
?matrix
y <- matrix(1:4,2,2)
y
y <- makeCacheMatrix()
y$set <- 1:4,2,2
source('cachematrix.R')
source('cachematrix.R')
source('cachematrix.R')
a<-makeCacheMatrix()
a$set(matrix(1:4,2,2)
kd
a$set(matrix(1:4,2,2))
a$getinverse
a$getinverse()
a$setinverse()
cacheSolve(a)
cacheSolve(a)
cacheSolve()
a <- cacheSolve()
cacheSolve(a)
cacheSolve()
source('cachematrix.R')
cacheSolve(a)
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
source('cachematrix.R')
cacheSolve(a)
a$get
a
cacheSolve(a)
cacheSolve(a)
a$get()
cacheSolve(a)
a$get()
a$getinverse()
a$setinverse()
cacheSolve(a)
source('cachematrix.R')
m <- makeCacheMatrix()
m$set(matrix(1:4,2,2))
cacheSolve(m)
cacheSolve(m)
source('cachematrix.R')
m <- makeCacheMatrix()
m$set(matrix(1:4,2,2))
cacheSolve(m)
cacheSolve(m)
source('cachematrix.R')
cacheSolve(m)
m <- makeCacheMatrix()
m$set(matrix(1:4,2,2))
cacheSolve(m)
cacheSolve(m)
makeCacheMatrix(x)
x = matrix()
makeCacheMatrix(x)
cacheSolve(x)
